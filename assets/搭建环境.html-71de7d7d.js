import{_ as d,V as r,W as t,X as u,Y as e,Z as n,a0 as l,a1 as c,a2 as a,F as s}from"./framework-82b537ca.js";const p={},v=e("p",null,"vue3的源码可以在github或者码云下载",-1),h=a(`<h2 id="vue源码目录" tabindex="-1"><a class="header-anchor" href="#vue源码目录" aria-hidden="true">#</a> vue源码目录</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  |-- package-lock.json&#39;,
  |-- package.json&#39;,
  |-- tsconfig.json&#39;,
  |-- yarn.lock&#39;,
  |-- packages&#39;,
      |-- reactivity&#39;,
      |   |-- package.json&#39;,
      |   |-- src&#39;,
      |       |-- index.ts&#39;,
      |-- scripts&#39;,
      |   |-- build.js&#39;,
      |-- shared&#39;,
          |-- package.json&#39;,
          |-- src&#39;,
              |-- index.ts&#39;,
              ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vue3采用monorepo方式进行源代码管理，采用rollup进行打包。<br> 使用monorepo的好处是可以统一管理依赖，方便代码复用。比如我们可以单独使用响应式模块，而不需要引入整个vue3库。</p><h2 id="rollup环境" tabindex="-1"><a class="header-anchor" href="#rollup环境" aria-hidden="true">#</a> rollup环境</h2><h3 id="rollup" tabindex="-1"><a class="header-anchor" href="#rollup" aria-hidden="true">#</a> rollup</h3><p>rollup是一个模块打包器，类似webpack，但是rollup更适合打包库。我们现在常用的一些工具和库，比如vite、vue3、react等都是使用rollup进行打包的。<br> 它可以收集我们代码中细小的模块并将他们打包为一整个模块，以便在浏览器或其它环境中使用。严格来说，rollup只是一个esm的打包器。它与webpack并非 竞争关系，它希望充分利用esm的各种特性，构建出结构扁平，性能高效的各种类库。</p><h3 id="vue3中需要使用到的插件" tabindex="-1"><a class="header-anchor" href="#vue3中需要使用到的插件" aria-hidden="true">#</a> vue3中需要使用到的插件</h3><p>列表如下：</p>`,8),m=e("li",null,"rollup //rollup核心",-1),_={href:"//xn--d-h14by67c.xn--ts-zg3cw96f",target:"_blank",rel:"noopener noreferrer"},b=e("li",null,"rollup-plugin-esbuild //利用 esbuild 引擎对 JavaScript 文件进行快速转换和优化",-1),g=e("li",null,"rollup-plugin-node-builtins //用于在打包过程中将 Node.js 核心模块（built-in modules）转换为在浏览器环境下可以使用的代码",-1),f=e("li",null,"rollup-plugin-node-globals //用于在打包过程中将 Node.js 全局变量转换为在浏览器环境下可以使用的代码",-1),k=e("li",null,"rollup-plugin-polyfill-node //在浏览器中使用类似 Node.js 的功能",-1),x=e("li",null,"@rollup/plugin-node-resolve //用于在打包过程中解析 Node.js 模块",-1),j=e("li",null,"@rollup/plugin-commonjs //将Commonjs模块转换为ESM",-1),y=e("li",null,"@rollup/plugin-json //用于在打包过程中加载 JSON 文件 并将JSON视为一个模块",-1),N=e("li",null,"@rollup/plugin-replace //根据配置的规则，将源代码中的指定字符串替换为指定的值",-1),E=e("li",null,"@rollup/plugin-terser //代码压缩混淆",-1),B=a(`<p>vue3源码项目中，由于monorepo的缘故，仅能使用yarn进行模块安装，且安装时需要使用 --W命令，以便将依赖安装到根目录下的node_modules中。<br> 例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> rollup <span class="token parameter variable">--W</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ts" tabindex="-1"><a class="header-anchor" href="#ts" aria-hidden="true">#</a> ts</h2><p>由于vue3源码是使用ts编写的，所以我们需要安装ts相关的依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> typescript
<span class="token function">yarn</span> <span class="token function">add</span> @types/node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>使用tsc --init生成默认的ts配置文件、使用yarn init -y生成默认的package.json文件</p>`,7),V=e("a",{href:"#vue%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95"},"vue源码目录",-1);function S(w,C){const i=s("ExternalLinkIcon"),o=s("RouterLink");return r(),t("div",null,[v,u(" more "),h,e("ul",null,[m,e("li",null,[n("rollup-plugin-dts "),e("a",_,[n("//生成d.ts文件"),l(i)])]),b,g,f,k,x,j,y,N,E]),B,e("p",null,[n("ok，环境安装到此呢就结束了，如果按照的结构"),V,n("初始化了项目，接下来就可以进行下一步"),l(o,{to:"/posts/learn/vue/build.html"},{default:c(()=>[n("编写构建文件")]),_:1})])])}const A=d(p,[["render",S],["__file","搭建环境.html.vue"]]);export{A as default};
