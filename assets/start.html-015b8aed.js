import{_ as n,V as s,W as a,a2 as e}from"./framework-82b537ca.js";const t={},p=e(`<h2 id="rxjs是什么" tabindex="-1"><a class="header-anchor" href="#rxjs是什么" aria-hidden="true">#</a> RXJS是什么</h2><p>官网说：</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>RxJS 是一个使用可观察序列编写异步和基于事件的程序的库。它提供了一种核心类型，即 Observable、一些周边类型（Observer、Scheduler、Subjects）和类似于 Array 方法（map、filter、reduce、every 等）的操作符，以便将异步事件作为集合进行处理。</p></div><p>非常不好理解，我们从上面提到的几个东西开始逐步理解这个东西</p><h2 id="observable" tabindex="-1"><a class="header-anchor" href="#observable" aria-hidden="true">#</a> Observable</h2><p>从字面意思上，它可以解释为“可观察的”。事实上，它确实是rxjs的最核心概念，一个可以被观察的“流”对象。</p><h3 id="可被观察" tabindex="-1"><a class="header-anchor" href="#可被观察" aria-hidden="true">#</a> 可被观察</h3><p>rxjs的核心是观察者模式(订阅-发布模式)，当订阅了一个可以被观察的对象时，订阅者(在rxjs中通常是observer，即<code>new Observable().subscribe(observer)</code>). 我们来看一段代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 首先是一个非常简单的创建被观察者</span>
<span class="token keyword">const</span> observable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>subscribe<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    subscribe<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    subscribe<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    subscribe<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        subscribe<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//然后去观察它(订阅)</span>
observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//随即，observable将推送一个数据流出来，1,2,3,1s...,4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
等待1s
<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="流" tabindex="-1"><a class="header-anchor" href="#流" aria-hidden="true">#</a> 流</h3><p>上文提到了一个被观察的对象，在被订阅后，会逐渐的推送出一个‘流’出来，那么流究竟是什么？<br> 在计算机科学中，流被用于描述一组数据的连续传输和处理，可以看作是数据的有序序列，尽管它们在时间上不一定连续。在网络中，用于代指连续传输的数据包序列(它仍然是一个有序的，但是不一定在时间上连续的数据序列)，比如TCP。 在代码中，比如java的io操作InputStream和node的FileStream，这些都是流的体现。 在rxjs中，所有被观测的对象，都会将数据以流的形式推送给观察者或者说订阅者。所以这就是官网对rxjs定性的第二点-将异步事件作为集合处理。同时，rxjs的几乎所有操作符都与Array方法相似，这表明了，rxjs中的数据流动是一个有序序列。<br> 接下来我们看一段代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> observable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>subscribe <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    subscribe<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    subscribe<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    subscribe<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        subscribe<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//1,2,3,1s...,4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","start.html.vue"]]);export{r as default};
