import{_ as r,V as o,W as s,Y as e,Z as n,a0 as t,X as i,a2 as l,F as c}from"./framework-82b537ca.js";const d="/carefree/demo.png",h="/carefree/create.png",p="/carefree/electron1.png",u={},_={href:"http://117.175.182.152:40004/",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"先来看一下效果图吧",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#先来看一下效果图吧","aria-hidden":"true"},"#"),n(" 先来看一下效果图吧！")],-1),f=e("figure",null,[e("img",{src:d,alt:"demo",tabindex:"0",loading:"lazy"}),e("figcaption",null,"demo")],-1),g={href:"https://github.com/lljl500220/electron",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"初始化、新建项目",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#初始化、新建项目","aria-hidden":"true"},"#"),n(" 初始化、新建项目")],-1),v=e("p",null,"本处只考虑windows系统，为什么捏，因为本大人没有mac！",-1),x={href:"https://cn-evite.netlify.app/guide/",target:"_blank",rel:"noopener noreferrer"},B=e("br",null,null,-1),E=l(`<ol><li>node14+</li><li>npx &amp;&amp; yarn</li></ol><p>在控制台中执行以下语句：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create @quick-start/electron
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后按部就班的根据提示，创建一个新项目。</p><figure><img src="`+h+`" alt="新建项目" tabindex="0" loading="lazy"><figcaption>新建项目</figcaption></figure><p>使用编辑器打开该项目，我习惯使用webstorm，你也可以使用vscode或者其它你喜欢的工具, 执行install.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
//执行完毕之后
<span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>node.js将为你打开这样一个预览程序：</p><figure><img src="`+p+'" alt="初始界面" tabindex="0" loading="lazy"><figcaption>初始界面</figcaption></figure><p>当你看到上图这样界面的时候，恭喜你，已经完成了最重要的一步啦!🎉🎉🎉。我们现在已经拥有了一个electron程序的雏形，接下来就是要将其完善， 工作内容就和使用vue3开发一个web应用没有太大的区别了。如果你拥有一定的vue3开发经验，那只需要阅读<a href="#%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1">进程通信</a>、<a href="#%E4%B8%BB%E8%BF%9B%E7%A8%8B">主进程</a>、<a href="#%E9%A2%84%E5%8A%A0%E8%BD%BD%E8%84%9A%E6%9C%AC">预加载脚本</a>、 <a href="#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B">渲染进程</a>等章节即可。</p><h2 id="进程通信" tabindex="-1"><a class="header-anchor" href="#进程通信" aria-hidden="true">#</a> 进程通信</h2><h3 id="主进程" tabindex="-1"><a class="header-anchor" href="#主进程" aria-hidden="true">#</a> 主进程</h3><p>electron程序使用chromium和node.js作为运行环境，将二者作为二进制打包进入exe文件中，使得静态的html页面能够模拟桌面应用的样子运行。</p>',13),k={href:"https://www.electronjs.org/zh/docs/latest/tutorial/process-model",target:"_blank",rel:"noopener noreferrer"},A=e("p",null,"electron拥有一个主进程+n个渲染进程，主进程运行在node.js中，拥有node api。渲染进程运行在chromium，拥有浏览器api，两者之间不可以直接进行通信(为了安全考虑)",-1),w=e("p",null,"主进程一般用于管理窗口，以及其它的有关node、系统的事件。",-1),F=e("h3",{id:"渲染进程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#渲染进程","aria-hidden":"true"},"#"),n(" 渲染进程")],-1),V=e("p",null,"可以理解为浏览器打开的一个个tab一样，google浏览器的多进程模式也是基于这样的设计完成的。刚刚我们打开的那个页面，嵌入的index.html就是一个渲染进程，而打开这个窗口的能力就是来自主进程。",-1),j=e("h3",{id:"预加载脚本",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#预加载脚本","aria-hidden":"true"},"#"),n(" 预加载脚本")],-1);function y(N,z){const a=c("ExternalLinkIcon");return o(),s("div",null,[e("p",null,[n("我接手的项目中有一个叫做 "),e("a",_,[n("全省成品油一体化监管服务平台"),t(a)]),n("。是以前一个前端写的，后来我接手后，一度觉得是依托答辩， 但是苦于一直没有时间重构，一直搁置到3月底。趁着最近没需求，正好把一直想学的electron学一下。")]),i(" more "),m,f,e("p",null,[e("a",g,[n("项目地址github"),t(a)]),n(" 请前往此处预览和下载项目文件")]),b,v,e("p",null,[n("首先在你的文件夹中选择一个地方，新建文件electron-app，当然也可不不新建，因为等下我们将使用"),e("a",x,[n("electron-vite"),t(a)]),n("命令新建这个工程。"),B,n(" 确保你有如下环境：")]),E,e("p",null,[n("上面也提到了，electron有主进程和渲染进程的区别，此概念来自于"),e("a",k,[n("流程模型"),t(a)]),n(", 是一个模拟了现代浏览器结构的模型，解决了一些安全问题，此处不细说，上面链接进去可以自行了解。")]),A,w,F,V,j])}const D=r(u,[["render",y],["__file","electron.html.vue"]]);export{D as default};
