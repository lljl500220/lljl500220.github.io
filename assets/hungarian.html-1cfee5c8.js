import{_ as n,V as s,W as a,a2 as p}from"./framework-82b537ca.js";const t="/learn/二分图1.png",o="/learn/二分图2.png",e="/learn/二分图3.png",c="/learn/二分图4.png",l="/learn/二分图6.png",i={},u=p('<p>最近忙完了省石化的紧急需求，终于得空刷刷题目了，今天遇到的题是化为机试的HJ28，从而了解到匈牙利算法。这玩意可比之前的动态规划简单多了，下面一起来看看吧~~</p><h2 id="匈牙利算法用来解决什么问题" tabindex="-1"><a class="header-anchor" href="#匈牙利算法用来解决什么问题" aria-hidden="true">#</a> 匈牙利算法用来解决什么问题？</h2><p>一般用于解决图论中的二分图求解最大匹配数和最小覆盖数的问题 下面是一个常见的二分图样例：</p><div style="text-align:center;"><figure><img src="'+t+`" alt="二分图" tabindex="0" loading="lazy"><figcaption>二分图</figcaption></figure></div><p>图中的实线表示集合x中的x？元素能与集合y中的元素y？形成一条有效边。</p><p>网络上有很多匈牙利算法的解法，我也是从前辈们的思想中学习的，那我这里就以HJ28这道题为切入点，讲讲通过匈牙利算法求得最大匹配数的问题。</p><h2 id="hj28" tabindex="-1"><a class="header-anchor" href="#hj28" aria-hidden="true">#</a> HJ28</h2><p>描述<br> 若两个正整数的和为素数，则这两个正整数称之为“素数伴侣”，如2和5、6和13，它们能应用于通信加密。现在密码学会请你设计一个程序，从已有的 N （ N 为偶数）个正整数中挑选出若干对组成“素数伴侣”，挑选方案多种多样，例如有4个正整数：2，5，6，13，如果将5和6分为一组中只能得到一组“素数伴侣”，而将2和5、6和13编组将得到两组“素数伴侣”，能组成“素数伴侣”最多的方案称为“最佳方案”，当然密码学会希望你寻找出“最佳方案”。</p><p>输入:<br> 有一个正偶数 n ，表示待挑选的自然数的个数。后面给出 n 个具体的数字。 输出: 输出一个整数 K ，表示你求得的“最佳方案”组成“素数伴侣”的对数。</p><p>输入描述：<br> 输入说明<br> 1 输入一个正偶数 n<br> 2 输入 n 个整数</p><p>输出描述：<br> 求得的“最佳方案”组成“素数伴侣”的对数。</p><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h3><p>素数由于只能由自己和1整除的特性，必然是一个偶数与一个奇数的和形成的某数，所以我们将传入的字符串先分割为奇数串和偶数串</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//左侧数组长度</span>
<span class="token keyword">let</span> <span class="token constant">M</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//右侧数组长度</span>
<span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//记录输入字符串长度，同时用于判断是否第一次输入</span>
<span class="token keyword">let</span> odds<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//奇数串</span>
<span class="token keyword">let</span> evens<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//偶数串</span>
<span class="token keyword">let</span> eToO<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//记录当前偶数匹配的奇数定位</span>
<span class="token keyword">let</span> oddStatus<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//记录当前奇数是否被访问过</span>
<span class="token keyword">let</span> mapPrime<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 左侧和右侧的公共边（两数相加能为素数）</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;line&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>line<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> k <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> temp <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token builtin">number</span> <span class="token keyword">of</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">even</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                evens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                odds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后需要计算偶数集合和奇数集合元素相加为素数的元素是哪些，也就是形成了有效边。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">N</span> <span class="token operator">=</span> evens<span class="token punctuation">.</span>length
<span class="token constant">M</span> <span class="token operator">=</span> odds<span class="token punctuation">.</span>length
eToO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token constant">M</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//初始化长度为奇数（右侧）长度的数组，初始匹配位置不能大于0</span>
mapPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token constant">M</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//初始化公共边数量为0</span>
<span class="token comment">// 初始化map,eToO,oddStatus</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token constant">M</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">prime</span><span class="token punctuation">(</span>evens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>odds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            mapPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化mapPrime之后，就进入了匈牙利算法的主题，这里我们就以集合 3,7,9,2,6,14为例</p><div style="text-align:center;"><figure><img src="`+o+'" alt="初始状态" tabindex="0" loading="lazy"><figcaption>初始状态</figcaption></figure></div><p>从图中可以直观的看到，3能与2和14组成素数，7能与6和14组成素数，而9分别能与2和14组成素数。按照匈牙利算法，先到先得，能让就让的思想，我们开始分析这个图。 从左边的奇数开始。<br> 我们先找到奇数3，发现他一开始就能能与偶数2组成素数，由于2还没有被绑定过关系，所以先给3和2做一个绑定关系，<mark>请注意</mark> 我们现在做的所有操作都是在设想阶段，并没有实际的给数字做了唯一的绑定关系，后面如果有其它数组能够匹配的话，这个关系是能够被替换掉的。 所以上面的图变成了这样。</p><div style="text-align:center;"><figure><img src="'+e+'" alt="3" tabindex="0" loading="lazy"><figcaption>3</figcaption></figure></div><p>接下来我们继续看7，发现它能与偶数6和14形成素数，由于6还没有被绑定过关系，所以给7与6形成绑定关系</p><div style="text-align:center;"><figure><img src="'+c+'" alt="7" tabindex="0" loading="lazy"><figcaption>7</figcaption></figure></div><p>然后看最后一个9，它既能与2形成素数也能与14形成素数，所以先判断2有没有被匹配过，因为2被3匹配过了。按照匈牙利算法的能让就让的思想， 这里我们需要解判断3能不能找到新的对应匹配，发现3也能和14进行绑定，可以将2让出来给9，所以3最后与14进行绑定，得到下面的状态。</p><div style="text-align:center;"><figure><img src="'+l+`" alt="9" tabindex="0" loading="lazy"><figcaption>9</figcaption></figure></div><p>所以最后所有人都得到了响应匹配的位置，所以得到最大匹配数为3。</p><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h3><p>最后的代码如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//HJ28</span>
<span class="token keyword">const</span> prime <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">debugger</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> even  <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//左侧数组长度</span>
<span class="token keyword">let</span> <span class="token constant">M</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//右侧数组长度</span>
<span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//记录输入字符串长度，同时用于判断是否第一次输入</span>
<span class="token keyword">let</span> odds<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//奇数串</span>
<span class="token keyword">let</span> evens<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//偶数串</span>
<span class="token keyword">let</span> eToO<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//记录当前偶数匹配的奇数定位</span>
<span class="token keyword">let</span> oddStatus<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//记录当前奇数是否被访问过</span>
<span class="token keyword">let</span> mapPrime<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 左侧和右侧的公共边（两数相加能为素数）</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;line&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>line<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> k <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> temp <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token builtin">number</span> <span class="token keyword">of</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">even</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                evens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                odds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token constant">N</span> <span class="token operator">=</span> evens<span class="token punctuation">.</span>length
        <span class="token constant">M</span> <span class="token operator">=</span> odds<span class="token punctuation">.</span>length
        eToO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token constant">M</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//初始化长度为奇数（右侧）长度的数组，匹配位置不能大于0</span>
        mapPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token constant">M</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//初始化公共边数量为0</span>
        <span class="token comment">// 初始化map,eToO,oddStatus</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token constant">M</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">prime</span><span class="token punctuation">(</span>evens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>odds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    mapPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//开始遍历偶数列表</span>
            oddStatus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token constant">M</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">//初始化访问状态为false 全未访问</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">HJ28</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                res<span class="token operator">++</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
        rl<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>



<span class="token comment">//HJ28</span>
<span class="token keyword">const</span> <span class="token constant">HJ28</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token constant">M</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mapPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>oddStatus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//当前访问的奇数和偶数能组成素数并且当前的奇数没有被访问过</span>
            oddStatus<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">//j位置的素数已经访问过了</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>eToO<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token constant">HJ28</span><span class="token punctuation">(</span>eToO<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//当前奇数还没有被匹配过或者当前奇数的原配能够找到另一个</span>
                eToO<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i
                <span class="token keyword">return</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>  <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),k=[u];function r(d,m){return s(),a("div",null,k)}const b=n(i,[["render",r],["__file","hungarian.html.vue"]]);export{b as default};
