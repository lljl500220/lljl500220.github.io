import{_ as n,V as s,W as a,X as t,Y as p,a2 as e}from"./framework-82b537ca.js";const o={},c=p("p",null,"挑选了一些我认为比较有难度或者延伸知识比较多的题目做题解。",-1),i=e(`<h2 id="hj6-质数因子" tabindex="-1"><a class="header-anchor" href="#hj6-质数因子" aria-hidden="true">#</a> HJ6 质数因子</h2><p>功能:输入一个正整数，按照从小到大的顺序输出它的所有质因子（重复的也要列举）（如180的质因子为2 2 3 3 5 ）<br> 数据范围: 1&lt;=n&lt;=2x10^9+14<br> 输入描述：<br> 输入一个整数<br> 输出描述：<br> 按照从小到大的顺序输出它的所有质数的因子，以空格隔开。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>质数：</strong> 只能被自己和1整除的数。<br><strong>因子：</strong> 乘法的一部分叫做因子。<br><strong>题目的意思约等于：</strong> 给定一个整数x，有不定多个质数能整除x，在数学上叫做分解质因式。<br><strong>切入点：</strong> 任何一个数，只要大于2，就一定会被1，2，3，5，7自身等其其中之一或多个整除。 以180来说，从path=2开始，被2整除，说明2是它的质因数，得到90，也能被2整除，得到45，能被3整除，得到15 能被3整除，得到5，只能被自身整除，最后num等于1，完全整除，如果不等，则说明它本身就是一个质数。</p></div><p>有主要代码如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> multiples <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//质数从2以上开始计算</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token comment">//结果集</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>path <span class="token operator">&lt;=</span> num <span class="token operator">&amp;&amp;</span> path<span class="token operator">*</span>path <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> path <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          res<span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
          num <span class="token operator">/=</span> path
          path <span class="token operator">=</span> <span class="token number">2</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
          path<span class="token operator">++</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      res<span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>num<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hj14-字符串排序" tabindex="-1"><a class="header-anchor" href="#hj14-字符串排序" aria-hidden="true">#</a> HJ14 字符串排序</h2><p>描述：给定 n 个字符串，请对 n 个字符串按照字典序排列。</p><div class="hint-container info"><p class="hint-container-title">JavaScript中的字典排序</p><p>java等高级语言一般需要手动实现字典排序，但是JavaScript不一样，js默认使用的排序方式为字典排序。 比如一个序列[1,2,5,10],使用arrayObj.sort得到的结果为[1,10,2,5]。js一般需要手动实现精确的排序。</p></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> readLine
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hj15-求int型正整数在内存中存储时1的个数" tabindex="-1"><a class="header-anchor" href="#hj15-求int型正整数在内存中存储时1的个数" aria-hidden="true">#</a> HJ15 求int型正整数在内存中存储时1的个数</h2><p>输入一个 int 型的正整数，计算出该 int 型数据在内存中存储时 1 的个数。<br> 数据范围：保证在 32 位整型数字范围内<br> 输入描述：<br> 输入一个整数（int类型）<br> 输出描述：<br> 这个数转换成2进制后，输出1的个数</p><div class="hint-container info"><p class="hint-container-title">js中进制转换的方法</p><p>一般都使用parseInt(num,进制)转换为十进制，使用toString(进制)转换为指定进制</p></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> num<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;输入一个数值型的数字&quot;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> count<span class="token operator">++</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function l(r,u){return s(),a("div",null,[c,t(" more "),i])}const d=n(o,[["render",l],["__file","化为机试.html.vue"]]);export{d as default};
