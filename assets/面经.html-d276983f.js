import{_ as n,V as s,W as a,X as t,Y as p,a2 as e}from"./framework-82b537ca.js";const o={},c=p("p",null,"一些面试遇到的问题，无关公司。",-1),l=e(`<h2 id="js基本数据类型" tabindex="-1"><a class="header-anchor" href="#js基本数据类型" aria-hidden="true">#</a> js基本数据类型</h2><ul><li>基本数据类型：String、Number、Boolean、Null、Undefined、Symbol</li></ul><h2 id="ts中type于interface的区别" tabindex="-1"><a class="header-anchor" href="#ts中type于interface的区别" aria-hidden="true">#</a> ts中type于interface的区别</h2><ul><li>type可以声明基本类型别名、联合类型、元组等类型</li><li>interface可以声明合并</li><li>type和interface都可以扩展，但是type可以扩展基本类型，interface不行</li><li>type可以使用typeof获取实例的类型，interface不行</li><li>interface可以定义多个同名的接口，type不行</li><li>interface可以定义类，type不行</li><li>interface可以定义声明合并，type不行</li><li>interface可以定义readonly，type不行</li><li>interface可以定义implements，type不行</li><li>interface可以定义extends，type不行</li></ul><h2 id="webpack打包less文件时经过了哪几个loader" tabindex="-1"><a class="header-anchor" href="#webpack打包less文件时经过了哪几个loader" aria-hidden="true">#</a> webpack打包less文件时经过了哪几个loader</h2><ul><li>less-loader 说实话，我是真没想到这个问题，一般来说使用时就加载less-loader嘛，他这个我不太明白</li></ul><h2 id="webpack打包时-如何实现按需加载" tabindex="-1"><a class="header-anchor" href="#webpack打包时-如何实现按需加载" aria-hidden="true">#</a> webpack打包时，如何实现按需加载</h2><ul><li>使用import()函数</li><li>使用webpack的require.ensure()函数</li><li>使用webpack的bundle-loader</li></ul><h2 id="为什么在打包时将图片转换为base64" tabindex="-1"><a class="header-anchor" href="#为什么在打包时将图片转换为base64" aria-hidden="true">#</a> 为什么在打包时将图片转换为base64</h2><ul><li>减少http请求</li><li>减少图片大小 我能想到的就这些，去百度了一下，也没个正形。</li></ul><h2 id="实现一个getparam函数-获取url中的参数" tabindex="-1"><a class="header-anchor" href="#实现一个getparam函数-获取url中的参数" aria-hidden="true">#</a> 实现一个getParam函数，获取url中的参数</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getParam</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span>
  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span>
    obj<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>
<span class="token comment">//当url中存在hash值时，需要同步获取</span>
<span class="token keyword">function</span> <span class="token function">getParam</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span>
  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span>
    obj<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> hash <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> hashArr <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span>
    hashArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> temp <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span>
      obj<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不知道面试官想要什么答案，我能想到的就是这样。</p>`,13);function i(u,r){return s(),a("div",null,[c,t("more"),l])}const d=n(o,[["render",i],["__file","面经.html.vue"]]);export{d as default};
