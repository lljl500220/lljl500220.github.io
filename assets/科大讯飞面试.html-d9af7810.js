import{_ as o,V as c,W as l,X as i,Y as s,Z as n,a0 as t,a1 as e,a2 as p,F as u}from"./framework-82b537ca.js";const r={},k=s("p",null,"今天呢也是参加了科大讯飞的面试，姑且不知道结果怎么，但是趁着还没完全忘记内容，我想把面试的内容记录下来，以便后续的总结。",-1),d=p('<h2 id="讲讲最近的项目" tabindex="-1"><a class="header-anchor" href="#讲讲最近的项目" aria-hidden="true">#</a> 讲讲最近的项目</h2><p>一上来呢就是这个问题，就我的简历来说，拿得出手的项目呢其实并不少，所以挑了两个协同场景比较多，技术内容比较丰富的项目来讲，一个是基于vue3的项目，一个是Hybrid项目。<br> 我个人认为，面试官的这个问题，本质上是在对你的项目经验进行一个考察，看你是不是真的做过项目，是不是真的了解项目，是不是真的能够在项目中解决问题。所以在回答这个问题的时候，我觉得可以从以下几个方面来回答：</p><ol><li>项目的背景，项目的需求，项目的技术栈</li><li>项目的难点，项目的解决方案</li><li>项目的收获，项目的总结</li></ol><h2 id="xhr的原理" tabindex="-1"><a class="header-anchor" href="#xhr的原理" aria-hidden="true">#</a> xhr的原理</h2><p>这个问题呢，我觉得是一个基础问题，但是我却没有回答出来，因为我对xhr的原理并不是很了解，我只知道它是一个用于前后端通信的工具，但是具体的原理呢，我并不是很清楚。<br> 所以在这里记录一下：</p><ol><li>xhr是一个用于前后端通信的工具，它是一个对象，通过这个对象我们可以向后端发送请求，获取数据</li><li>xhr的原理是通过创建一个xhr对象，然后通过这个对象的open方法来打开一个请求，然后通过send方法来发送请求，最后通过onreadystatechange事件来监听请求的状态，当请求的状态发生变化的时候，我们可以通过这个事件来获取请求的结果</li><li>xhr的状态有五种，分别是0-4，0表示未初始化，1表示已打开，2表示已发送，3表示已接收，4表示已完成</li><li>xhr的请求方式有七种，分别是GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE</li><li>xhr的请求头有很多，比如Content-Type、Accept、Authorization等</li><li>xhr的响应头也有很多，比如Content-Type、Content-Length、Content-Encoding等</li><li>xhr的请求参数有很多，比如url、method、headers、body等</li><li>xhr的响应参数也有很多，比如status、statusText、responseType、responseText等</li><li>xhr的请求和响应都是异步的，所以我们需要通过onreadystatechange事件来监听请求的状态</li></ol><p>以上呢，是我对xhr的原理的一些了解，但是我觉得还是不够，所以我打算在后续的学习中，继续深入学习xhr的原理，以便更好地回答这个问题。</p><h2 id="vue3的双向绑定是怎么实现的" tabindex="-1"><a class="header-anchor" href="#vue3的双向绑定是怎么实现的" aria-hidden="true">#</a> vue3的双向绑定是怎么实现的</h2>',8),v=s("h2",{id:"说一下diff算法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#说一下diff算法","aria-hidden":"true"},"#"),n(" 说一下diff算法")],-1),m=p(`<h2 id="大文件分片" tabindex="-1"><a class="header-anchor" href="#大文件分片" aria-hidden="true">#</a> 大文件分片</h2><p>这个问题呢，我觉得是一个比较实际的问题，因为在实际的项目中，我们经常会遇到这样的问题，比如上传一个大文件，比如下载一个大文件，比如播放一个大文件。下面我们一起来看一下大文件分片的实现原理：<br> 这里呢我给出一个示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 计算文件的md5值</span>
<span class="token keyword">function</span> <span class="token function">calculateMd5</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> spark <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkMD5<span class="token punctuation">.</span>ArrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个md5对象</span>
            spark<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>spark<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        reader<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        reader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2. 分片</span>
<span class="token keyword">function</span> <span class="token function">sliceFile</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> chunkSize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> end <span class="token operator">=</span> chunkSize
    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span>
        start <span class="token operator">=</span> end
        end <span class="token operator">=</span> start <span class="token operator">+</span> chunkSize
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> chunks
<span class="token punctuation">}</span>

<span class="token comment">// 3. 上传</span>
<span class="token keyword">function</span> <span class="token function">uploadChunks</span><span class="token punctuation">(</span><span class="token parameter">chunks</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>chunks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;chunk&#39;</span><span class="token punctuation">,</span> chunk<span class="token punctuation">)</span>
            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000/upload&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">body</span><span class="token operator">:</span> formData
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其它的内容呢我觉得是没什么难度的，比如ts对开发的影响，比如vue3的新特性，比如webpack的优化等等，所以我就不再赘述了。</p>`,4);function h(b,f){const a=u("RouterLink");return c(),l("div",null,[k,i(" more "),d,s("p",null,[n("算是老生常谈的问题了，其原理呢也很简单，我最近正好写了一篇文章用来阐述这部分内容，"),t(a,{to:"/posts/learn/vue/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0.html"},{default:e(()=>[n("在这里")]),_:1}),n("可以查看。")]),v,s("p",null,[n("也是非常容易出现的题了，恰巧，我这里呢也有一篇文章用来阐述这部分内容，"),t(a,{to:"/posts/learn/vue/diff.html"},{default:e(()=>[n("在这里")]),_:1}),n("可以查看。")]),m])}const _=o(r,[["render",h],["__file","科大讯飞面试.html.vue"]]);export{_ as default};
