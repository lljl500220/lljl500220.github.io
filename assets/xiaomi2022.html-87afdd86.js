import{_ as i,V as c,W as p,Y as s,Z as a,a0 as e,a1 as l,a2 as n,F as o}from"./framework-82b537ca.js";const k="/learn/div+p.png",u={},r=n(`<ol><li>关于 &lt;!DOCTYPE&gt; 下列说法错误的是 <ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> &lt;!DOCTYPE&gt; 声明必须是 HTML 文档的第一行，位于 html 标签之前</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> &lt;!DOCTYPE&gt; 声明没有结束标签</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> &lt;!DOCTYPE&gt; 声明对大小写不敏感</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> &lt;!DOCTYPE&gt; 声明是 HTML 标签，它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。</label></li></ul></li></ol><div class="hint-container info"><p class="hint-container-title">题解</p><!--DOCTYPE--> 声明必须位于 HTML5 文档中的第一行，也就是位于 html 标签之前。该标签告知浏览器文档所使用的HTML 规范。 <p>doctype 声明不属于 HTML 标签；tag; 它是一条指令，告诉浏览器编写页面所用的标记的版本。</p></div><ol start="2"><li>以下代码的输出结果是<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> start <span class="token operator">=</span> end <span class="token operator">-</span> <span class="token number">100</span>
<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">++</span>count
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="hint-container info"><p class="hint-container-title">题解</p><p>101,不管Math.pow()的结果是多少，循环空间总是100，++count指令先执行加一操作再执行i++操作，所以进入第一百次循环后仍然执行了一次加一。</p><p>Math.pow(x,y)是用于计算x的y次方的值</p></div><ol start="3"><li>使用Javascript在数组尾部添加数据的方法是？ <ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> arrayObj.shift()</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> arrayObj.unshift()</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> arrayObj.pop()</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> arrayObj.push()</label></li></ul></li></ol>`,5),d={class:"hint-container info"},b=s("p",{class:"hint-container-title"},"题解",-1),m=s("br",null,null,-1),v=s("br",null,null,-1),h=s("br",null,null,-1),f=s("br",null,null,-1),y=n(`<ol start="4"><li>下列关于Window Location 说法错误的是（ ） <ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-8"> location.host 返回 web 主机的域名</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-9" disabled="disabled"><label class="task-list-item-label" for="task-item-9"> location.pathname 返回当前页面的路径和文件名</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-10" disabled="disabled"><label class="task-list-item-label" for="task-item-10"> location.port 返回 web 主机的端口 （80 或 443）</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-11" disabled="disabled"><label class="task-list-item-label" for="task-item-11"> location.protocol 返回所使用的 web 协议（http: 或 https:）</label></li></ul></li></ol><div class="hint-container info"><p class="hint-container-title">题解</p><p>hostname返回主机域名，不带端口；host返回的是主机域名、ip加端口</p></div><ol start="5"><li>写出下面代码的执行结果<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">A</span> <span class="token punctuation">(</span><span class="token parameter">cName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>cName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> cName
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;XiaoMi&#39;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token constant">B</span> <span class="token punctuation">(</span><span class="token parameter">cName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> cName
<span class="token punctuation">}</span>
<span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Xiaomi&#39;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="hint-container info"><p class="hint-container-title">题解</p><p>输出：A XiaoMi;B undefined<br> 方法A、B实例均没有传入实参，故A中this.name没有被undefined覆盖；但是b的this.name被覆盖了。</p></div><ol start="6"><li>下方代码的值是：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> oldValue <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> newValue <span class="token operator">=</span> oldValue <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="hint-container info"><p class="hint-container-title">题解</p><p>16<br> &lt;&lt; 位运算符，js中数字类型默认为十进制，位运算使用二进制运算，则 2 &lt;&lt; 3等于2的二进制数左移3位，高位丢弃，低位补0<br> 2的二进制数为 0000 0010，左移三位后为 0001 0000，化为十进制为16</p></div><ol start="7"><li>position定位，下列说法错误的是（ ） <ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-12" disabled="disabled"><label class="task-list-item-label" for="task-item-12"> fixed元素，可定位相对于浏览器窗口的指定坐标，它始终是以 body 为依据</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-13" disabled="disabled"><label class="task-list-item-label" for="task-item-13"> absolute 的元素，如果它的父容器设置了 position 属性，并且 position 的属性值为 absolute 或者relative，那么就会依据父容器进行偏移</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-14" disabled="disabled"><label class="task-list-item-label" for="task-item-14"> fixed 属性的元素在标准流中不占位置</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-15" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-15"> relative元素以它原来的位置为基准偏移，在其移动后，原来的位置不再占据空间</label></li></ul></li></ol><div class="hint-container info"><p class="hint-container-title">题解</p><p>fixed 不占文档流位置，以body为依据，故而可以放置在任意地方<br> absolut根据父元素偏移。若父元素没有position值则根据body偏移<br> relative偏移后仍然占据空间</p></div><ol start="8"><li>请填写下面代码的输出结果（ ）<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="hint-container info"><p class="hint-container-title">题解</p><p>4,4,4,4<br> for循环体内执行的内容是向callbacks中添加了四个一模一样的方法，该方法打印i值。由于 i是var关键字定义的，在for循环结束后仍然存在，所以最后循环执行时打印了最后一次循环时 的i值，即4。<br> 若i是let定义的，有作用域限制，则会打印0,1,2,3。</p></div><ol start="9"><li>下列哪些不是浏览器支持的css选择器：（ ） <ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-16" disabled="disabled"><label class="task-list-item-label" for="task-item-16"> div + p</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-17" disabled="disabled"><label class="task-list-item-label" for="task-item-17"> div:nth-child(1)</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-18" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-18"> a:disabled</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-19" disabled="disabled"><label class="task-list-item-label" for="task-item-19"> input:disabled</label></li></ul></li></ol><div class="hint-container info"><p class="hint-container-title">题解</p><p>a标签没有disabled属性<br> div+p如下：</p><div style="text-align:center;"><figure><img src="`+k+'" alt="div+p" height="300" tabindex="0" loading="lazy"><figcaption>div+p</figcaption></figure></div></div><ol start="10"><li>数组中会改变原数组方法有哪些？</li></ol><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-20" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-20"> sort</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-21" disabled="disabled"><label class="task-list-item-label" for="task-item-21"> slice</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-22" disabled="disabled"><label class="task-list-item-label" for="task-item-22"> concat</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-23" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-23"> pop</label></li></ul>',14),x={class:"hint-container info"},g=n(`<p class="hint-container-title">题解</p><p>array.sort()方法给原数组排序，可以传入参数函数实现倒序和正序或者自定义排序</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// return a - b  正序</span>
    <span class="token keyword">return</span> b <span class="token operator">-</span> a <span class="token comment">//倒序</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),_=s("br",null,null,-1),w=s("br",null,null,-1),j=n(`<ol start="11"><li>下列属于宏任务的是？</li></ol><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-24" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-24"> setTimeout</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-25" disabled="disabled"><label class="task-list-item-label" for="task-item-25"> MutationObserver</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-26" disabled="disabled"><label class="task-list-item-label" for="task-item-26"> Promise.then catch finally</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-27" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-27"> requestAnimationFrame</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-28" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-28"> setInterval</label></li></ul><div class="hint-container info"><p class="hint-container-title">题解</p><p>js宏任务包括 script(整体代码)<br> setTimeout<br> setInterval<br> I/O<br> UI交互事件<br> postMessage 跨源通信方法<br> MessageChannel 消息通道<br> setImmediate(Node.js 环境) 将一个方法放入回调，在浏览器执行完毕其他任务后执行该方法<br> requestAnimationFrame方法是用于页面动画帧的实现，属于ui事件。</p></div><ol start="12"><li>【集合的所有子集】<br> 问题描述: 集合的所有子集 给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集。示例如下：<br> 输入样例1：nums = [1,2,3]<br> 输出样例1：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]<br> 输入样例2：nums = [0]<br> 输出样例2：[[],[0]]</li></ol><div class="hint-container info"><p class="hint-container-title">题解</p><p>回溯算法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">subsets</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> path<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//定义回溯队列</span>
    <span class="token keyword">let</span> result<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//结果</span>
    <span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//每次回溯成功后将当前队列解构至结果集</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">&gt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//当前选择的结果集</span>
            <span class="token function">backtrack</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//递归</span>
            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//回溯</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,5);function T(M,O){const t=o("RouterLink");return c(),p("div",null,[r,s("div",d,[b,s("p",null,[a("shift() 从头部删除一个元素，返回该元素"),m,a(" unshift() 向头部添加一个元素，viod类型"),v,a(" pop() 和其它语言一样，出栈，从尾部删除一个元素，返回该元素"),h,a(" push() 向尾部添加一个元素，void类型"),f,e(t,{to:"/posts/learn/note/arrayFunction.html"},{default:l(()=>[a("更多array的相关方法请看这篇文章→")]),_:1})])]),y,s("div",x,[g,s("p",null,[a("array.slice(start,end)方法截取数组的start位到end位。返回截取内容，原数组不变"),_,a(" concat(arr1,arr2)函数链接两个数组，原数组不变，返回新数组"),w,e(t,{to:"/posts/learn/note/arrayFunction.html"},{default:l(()=>[a("更多array的相关方法请看这篇文章→")]),_:1})])]),j])}const A=i(u,[["render",T],["__file","xiaomi2022.html.vue"]]);export{A as default};
