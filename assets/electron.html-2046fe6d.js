import{_ as e,V as o,W as c,Y as n,Z as s,a0 as t,X as i,a2 as p,F as l}from"./framework-82b537ca.js";const u="/carefree/new-pe-demo.gif",r="/carefree/create.png",k="/carefree/electron1.png",d="/carefree/files.png",m="/carefree/动画.gif",v="/carefree/index-html.jpg",b={},g={href:"http://117.175.182.152:40004/",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"先来看一下效果图吧",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#先来看一下效果图吧","aria-hidden":"true"},"#"),s(" 先来看一下效果图吧！")],-1),w=n("figure",null,[n("img",{src:u,alt:"demo",tabindex:"0",loading:"lazy"}),n("figcaption",null,"demo")],-1),f={href:"https://github.com/lljl500220/electron",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"初始化、新建项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#初始化、新建项目","aria-hidden":"true"},"#"),s(" 初始化、新建项目")],-1),_=n("p",null,"本处只考虑windows系统，为什么捏，因为本大人没有mac！",-1),x={href:"https://cn-evite.netlify.app/guide/",target:"_blank",rel:"noopener noreferrer"},E=n("br",null,null,-1),W=p(`<ol><li>node14+</li><li>npx &amp;&amp; yarn</li></ol><p>在控制台中执行以下语句：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create @quick-start/electron
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后按部就班的根据提示，创建一个新项目。</p><figure><img src="`+r+`" alt="新建项目" tabindex="0" loading="lazy"><figcaption>新建项目</figcaption></figure><p>使用编辑器打开该项目，我习惯使用webstorm，你也可以使用vscode或者其它你喜欢的工具, 执行install.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
//执行完毕之后
<span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>node.js将为你打开这样一个预览程序：</p><figure><img src="`+k+'" alt="初始界面" tabindex="0" loading="lazy"><figcaption>初始界面</figcaption></figure><p>当你看到上图这样界面的时候，恭喜你，已经完成了最重要的一步啦!🎉🎉🎉。我们现在已经拥有了一个electron程序的雏形，接下来就是要将其完善， 工作内容就和使用vue3开发一个web应用没有太大的区别了。如果你拥有一定的vue3开发经验，那只需要阅读<a href="#%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1">进程通信</a>、<a href="#%E4%B8%BB%E8%BF%9B%E7%A8%8B">主进程</a>、<a href="#%E9%A2%84%E5%8A%A0%E8%BD%BD%E8%84%9A%E6%9C%AC">预加载脚本</a>、 <a href="#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B">渲染进程</a>等章节即可。</p><h2 id="进程通信" tabindex="-1"><a class="header-anchor" href="#进程通信" aria-hidden="true">#</a> 进程通信</h2><h3 id="主进程" tabindex="-1"><a class="header-anchor" href="#主进程" aria-hidden="true">#</a> 主进程</h3><p>electron程序使用chromium和node.js作为运行环境，将二者作为二进制打包进入exe文件中，使得静态的html页面能够模拟桌面应用的样子运行。</p>',13),B={href:"https://www.electronjs.org/zh/docs/latest/tutorial/process-model",target:"_blank",rel:"noopener noreferrer"},R=p('<p>electron拥有一个主进程+n个渲染进程，主进程运行在node.js中，拥有node api。渲染进程运行在chromium，拥有浏览器api，两者之间不可以直接进行通信(为了安全考虑)</p><p>主进程一般用于管理窗口，以及其它的有关node、系统的事件。</p><h3 id="渲染进程" tabindex="-1"><a class="header-anchor" href="#渲染进程" aria-hidden="true">#</a> 渲染进程</h3><p>可以理解为浏览器打开的一个个tab一样，google浏览器的多进程模式也是基于这样的设计完成的。刚刚我们打开的那个页面，嵌入的index.html就是一个渲染进程，而打开这个窗口的能力就是来自主进程。</p><h3 id="预加载脚本" tabindex="-1"><a class="header-anchor" href="#预加载脚本" aria-hidden="true">#</a> 预加载脚本</h3><p>上文说到，主进程和渲染进程之间无法进行直接通信，那有些内容又确实需要进行通信该咋办咧？搭个桥嘛，所以预加载脚本就应运而生，它作为一个中间件提供了主进程往渲染进程传递内容或者 渲染进程往主进程请求内容的能力。</p><h3 id="主进程实例" tabindex="-1"><a class="header-anchor" href="#主进程实例" aria-hidden="true">#</a> 主进程实例</h3><p>打开新建好的工程，其结构应该长这样：</p><figure><img src="'+d+`" alt="目录结构" tabindex="0" loading="lazy"><figcaption>目录结构</figcaption></figure><p>主进程应该被写在/src/main/index.ts文件中，一起来看下这个文件：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> shell<span class="token punctuation">,</span> BrowserWindow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;electron&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> join <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> electronApp<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> <span class="token keyword">is</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@electron-toolkit/utils&#39;</span>
<span class="token keyword">import</span> icon <span class="token keyword">from</span> <span class="token string">&#39;../../resources/icon.png?asset&#39;</span>

<span class="token keyword">function</span> <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// 新建窗口</span>
    <span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        width<span class="token operator">:</span> <span class="token number">900</span><span class="token punctuation">,</span>
        height<span class="token operator">:</span> <span class="token number">670</span><span class="token punctuation">,</span>
        show<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        autoHideMenuBar<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token operator">...</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">&#39;linux&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span> icon <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        webPreferences<span class="token operator">:</span> <span class="token punctuation">{</span>
            preload<span class="token operator">:</span> <span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../preload/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            sandbox<span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ready-to-show&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        mainWindow<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">setWindowOpenHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        shell<span class="token punctuation">.</span><span class="token function">openExternal</span><span class="token punctuation">(</span>details<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> action<span class="token operator">:</span> <span class="token string">&#39;deny&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 如果是在开发模式下，loadURL方法会加载vite服务的地址，比如http://localhost:8080</span>
    <span class="token comment">// 如果是打包之后，loadFile方法会加载一个基于当前文件夹地址加上renderer/index.html的文件</span>
    <span class="token comment">// 其实就是我们vue程序的那个index.html</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">is</span><span class="token punctuation">.</span>dev <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;ELECTRON_RENDERER_URL&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;ELECTRON_RENDERER_URL&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../renderer/index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// whenReady方法会告诉你electron已经准备好了，可以加载了</span>
<span class="token comment">// 此外，有很多的方法和api只能在whenReady之后使用，比如icp模块</span>
app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Set app user model id for windows</span>
    electronApp<span class="token punctuation">.</span><span class="token function">setAppUserModelId</span><span class="token punctuation">(</span><span class="token string">&#39;com.electron&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// Default open or close DevTools by F12 in development</span>
    <span class="token comment">// and ignore CommandOrControl + R in production.</span>
    <span class="token comment">// see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils</span>
    app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;browser-window-created&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> window<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        optimizer<span class="token punctuation">.</span><span class="token function">watchWindowShortcuts</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;activate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// On macOS it&#39;s common to re-create a window in the app when the</span>
        <span class="token comment">// dock icon is clicked and there are no other windows open.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>BrowserWindow<span class="token punctuation">.</span><span class="token function">getAllWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Quit when all windows are closed, except on macOS. There, it&#39;s common</span>
<span class="token comment">// for applications and their menu bar to stay active until the user quits</span>
<span class="token comment">// explicitly with Cmd + Q.</span>
app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;window-all-closed&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">!==</span> <span class="token string">&#39;darwin&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// In this file you can include the rest of your app&quot;s specific main process</span>
<span class="token comment">// code. You can also put them in separate files and require them here.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先跃入眼帘的是createWindow方法，方法中创建了一个BrowserWindow实例名为mainWindow，mainWindow几个参数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    width<span class="token operator">:</span> <span class="token number">900</span><span class="token punctuation">,</span> <span class="token comment">//宽度</span>
    height<span class="token operator">:</span> <span class="token number">670</span><span class="token punctuation">,</span> <span class="token comment">//高度</span>
    show<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否一开始就显示</span>
    autoHideMenuBar<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//自动隐藏左上方的工具栏</span>
    <span class="token operator">...</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">&#39;linux&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span> icon <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//设置程序icon</span>
    webPreferences<span class="token operator">:</span> <span class="token punctuation">{</span>
        preload<span class="token operator">:</span> <span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../preload/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//预加载脚本地址</span>
        sandbox<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">//不是很懂这个sandbox，实际上开启之后也不会对程序有直观影响</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们将show属性设置为了false，所以只执行createWindow将无法打开窗口。继续向下看：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ready-to-show事件定义了一个监听，当index.html已经加载完毕后就会触发。</span>
mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ready-to-show&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// BrowserWindow.show方法打开当前实例窗口</span>
    <span class="token comment">// 从这个位置之后就能看到窗口弹出了</span>
    mainWindow<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
    
<span class="token comment">// 用于替换window.open方法，这里反悔了deny，则永远不会打开新窗口，需要打开新窗口则需要需要新建一个BrowserWindow实例打开</span>
mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">setWindowOpenHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//以桌面的默认方式打开url，有可能是一个文件。</span>
    shell<span class="token punctuation">.</span><span class="token function">openExternal</span><span class="token punctuation">(</span>details<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> action<span class="token operator">:</span> <span class="token string">&#39;deny&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 如果是在开发模式下，loadURL方法会加载vite服务的地址，比如http://localhost:8080</span>
<span class="token comment">// 如果是打包之后，loadFile方法会加载一个基于当前文件夹地址加上renderer/index.html的文件</span>
<span class="token comment">// 其实就是我们vue程序的那个index.html</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">is</span><span class="token punctuation">.</span>dev <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;ELECTRON_RENDERER_URL&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;ELECTRON_RENDERER_URL&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../renderer/index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里为止呢，主进程的大部分代码就已经结束了，接下来就是在app.whenReady事件中执行creatWindow方法创建实例就可以啦。</p><h3 id="预加载脚本-1" tabindex="-1"><a class="header-anchor" href="#预加载脚本-1" aria-hidden="true">#</a> 预加载脚本</h3><p>上文说到，预加载脚本用来解决主进程和渲染进程通信的问题。预加载脚本在preload文件夹中，首先来看一段预加载脚本的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> contextBridge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;electron&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> electronAPI <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@electron-toolkit/preload&#39;</span>

<span class="token comment">// Custom APIs for renderer</span>
<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// process.contextIsolated 上下文隔离，这个值要在主进程的webPreferences中定义，一般都是为true的。</span>
<span class="token comment">// 如果将这个值定义为false，则在渲染进程中可以直接访问node的api而不需要预加载脚本。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>contextIsolated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 通过上下文桥将electronAPI暴露到渲染进程中。</span>
        contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">,</span> electronAPI<span class="token punctuation">)</span>
        contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">&#39;api&#39;</span><span class="token punctuation">,</span> api<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// @ts-ignore (define in dts)</span>
    window<span class="token punctuation">.</span>electron <span class="token operator">=</span> electronAPI
    <span class="token comment">// @ts-ignore (define in dts)</span>
    window<span class="token punctuation">.</span>api <span class="token operator">=</span> api
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的预加载脚本，我们就可以在vue代码中访问electronAPI了</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> versions <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>window<span class="token punctuation">.</span>electron<span class="token punctuation">.</span>process<span class="token punctuation">.</span>versions <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>versions<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>electron-version<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Electron v{{ versions.electron }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>chrome-version<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Chromium v{{ versions.chrome }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>node-version<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Node v{{ versions.node }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>v8-version<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>V8 v{{ versions.v8 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="渲染进程主动请求主进程信息" tabindex="-1"><a class="header-anchor" href="#渲染进程主动请求主进程信息" aria-hidden="true">#</a> 渲染进程主动请求主进程信息</h2><h3 id="启动动画实例" tabindex="-1"><a class="header-anchor" href="#启动动画实例" aria-hidden="true">#</a> 启动动画实例</h3><p>上面说了进程间的通信以及创建一个初始的window，接下来我们实现一个app常见的启动动画：</p><figure><img src="`+m+'" alt="启动动画" tabindex="0" loading="lazy"><figcaption>启动动画</figcaption></figure>',25),q={href:"https://github.com/lljl500220/electron",target:"_blank",rel:"noopener noreferrer"},A=p('<p>接下来我们要实现：</p><ol><li>在主界面打开之前，先打开这个页面</li><li>模拟主界面加载，比如接口请求完毕，文件请求完毕等，异步关闭该界面，打开主界面</li></ol><p>首先实现第一步： 想要打开一个窗口，就需要用到我们上面提到的BrowserWindow类，那么就存在了两个BrowserWindow实例，现在需要将这两个实例异步加载。</p><p>首先在resources文件夹中写入上面的loading.html，如下：</p><figure><img src="'+v+`" alt="loading.html" tabindex="0" loading="lazy"><figcaption>loading.html</figcaption></figure><p>然后在main/index.ts文件中新加如下代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main/index.ts</span>
<span class="token keyword">const</span> showLoading <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    load <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        width<span class="token operator">:</span> <span class="token number">960</span><span class="token punctuation">,</span>
        height<span class="token operator">:</span> <span class="token number">670</span><span class="token punctuation">,</span>
        frame<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        backgroundColor<span class="token operator">:</span> <span class="token string">&#39;#2376b7&#39;</span><span class="token punctuation">,</span>
        webPreferences<span class="token operator">:</span> <span class="token punctuation">{</span>
            contextIsolation<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token comment">// preload: join(__dirname, &#39;../preload/index.js&#39;),</span>
            sandbox<span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// load.webContents.openDevTools()</span>
    load<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../../resources/loading.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    load<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;show&#39;</span><span class="token punctuation">,</span> createWindow<span class="token punctuation">)</span>
    load<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，load变量需要定义为全局变量，因为我们等下要在主窗口中将其关闭。</p><p>原来whenReady事件中，调用了createWindow()方法唤起主界面，现在我们需要修改为showLoading()方法，先行唤起我们的启动页。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">--</span> <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">++</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>唤醒启动页之后，需要模拟一个等待的过程，比如网络请求啊，本地文件读取啊之类的事件。这里我们模拟一下在渲染进程，也就是我们的app 中发起网络请求，等待其返回之后关闭启动页，打开主页面的过程。</p><p>要实现上面这个效果，就需要在渲染进程和主进程之间进行通信，我们现在预加载脚本中添加一个函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">&#39;api&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">ping</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ipcRenderer<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在主进程中监听ipcMain：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>load<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//启动页隐藏、关闭</span>
        load<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        load<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//主页面去除menu</span>
    Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token comment">//主页面最大化</span>
    mainWindow<span class="token punctuation">.</span><span class="token function">maximize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//主页面显示</span>
    mainWindow<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//返回了屏幕尺寸</span>
    <span class="token keyword">return</span> mainWindow<span class="token punctuation">.</span><span class="token function">getContentSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在我们的渲染进程触发window.ping方法就好啦：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//index.vue</span>

<span class="token keyword">const</span> <span class="token function-variable function">ping</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//@ts-ignore</span>
    <span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> window<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    rem<span class="token punctuation">.</span>value <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;rem&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">&#39;font-size&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> rem<span class="token punctuation">.</span>value
    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
    <span class="token function">resetChart</span><span class="token punctuation">(</span><span class="token string">&#39;贵州&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),j={href:"https://www.electronjs.org/zh/docs/latest/",target:"_blank",rel:"noopener noreferrer"};function C(N,I){const a=l("ExternalLinkIcon");return o(),c("div",null,[n("p",null,[s("我接手的项目中有一个叫做 "),n("a",g,[s("全省成品油一体化监管服务平台"),t(a)]),s("。是以前一个前端写的，后来我接手后，一度觉得是依托答辩， 但是苦于一直没有时间重构，一直搁置到3月底。趁着最近没需求，正好把一直想学的electron学一下。")]),i(" more "),h,w,n("p",null,[n("a",f,[s("项目地址github"),t(a)]),s(" 请前往此处预览和下载项目文件")]),y,_,n("p",null,[s("首先在你的文件夹中选择一个地方，新建文件electron-app，当然也可不不新建，因为等下我们将使用"),n("a",x,[s("electron-vite"),t(a)]),s("命令新建这个工程。"),E,s(" 确保你有如下环境：")]),W,n("p",null,[s("上面也提到了，electron有主进程和渲染进程的区别，此概念来自于"),n("a",B,[s("流程模型"),t(a)]),s(", 是一个模拟了现代浏览器结构的模型，解决了一些安全问题，此处不细说，上面链接进去可以自行了解。")]),R,n("p",null,[s("上面这个动画的文件可以在"),n("a",q,[s("项目地址github"),t(a)]),s("这里找到。")]),A,n("p",null,[s("到这里呢，electron基本的使用已经就完成啦，它仍然有非常多的api需要自己去学习，我只是记录自己学习的过程，更多的内容请前往"),n("a",j,[s("electron"),t(a)]),s("自主学习吧！")])])}const T=e(b,[["render",C],["__file","electron.html.vue"]]);export{T as default};
