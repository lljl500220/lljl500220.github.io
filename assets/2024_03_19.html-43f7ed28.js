import{_ as n,V as s,W as a,a2 as p}from"./framework-82b537ca.js";const t={},e=p(`<h2 id="_1793-好子数组的最大分数-困难" tabindex="-1"><a class="header-anchor" href="#_1793-好子数组的最大分数-困难" aria-hidden="true">#</a> 1793. 好子数组的最大分数 （困难）</h2><p>给你一个整数数组 nums （下标从 0 开始）和一个整数 k 。</p><p>一个子数组 (i, j) 的 分数 定义为 min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1) 。一个 好 子数组的两个端点下标需要满足 i &lt;= k &lt;= j 。</p><p>请你返回 好 子数组的最大可能 分数 。</p><blockquote><p>示例1：<br> 输入：nums = [1,4,3,7,4,5], k = 3<br> 输出：15<br> 解释：最优子数组的左右端点下标是 (1, 5) ，分数为 min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15 。</p></blockquote><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>由题目可以知道：</p><ol><li>nums[k]必须要被包含在子数组中</li><li>nums[k]必须是子数组中的最大值</li></ol><p>第一点显而易见，主要说一下第二点：<br> 题中求分数的式子为min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)，则假设子数组中有一个数比nums[k]还大，那么min必然不会是他，所以比nums[k]还大的数没有意义。即：边界之一为nums[?]&lt;=nums[k]。</p><h2 id="解题" tabindex="-1"><a class="header-anchor" href="#解题" aria-hidden="true">#</a> 解题</h2><p>接下来一步一步来解题 既然k必然满足i&lt;=k&lt;=j，那么我们不妨假定left，right分别代表k的左右坐标，在满足 nums[k] &gt;= nums[left] 以及nums[k] &gt;= nums[right]时，持续往两边拓展边界，直到触摸到nums边界为止。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">maximumScore</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//结果</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token comment">//定义，避免多次读取，增加性能</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 左边开始，</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">//右边开始</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//无限循环;;，每次循环，nums[k]都会变小以寻找到更小范围的子数组</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//上面分析的，left要触摸到数组的左边界，以及满足小于nums[k]</span>
            <span class="token operator">--</span>left
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//同 right</span>
            <span class="token operator">++</span>right
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token comment">//求取上一个i对应的子数组分数与当前循环子数组的分数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="性能分析" tabindex="-1"><a class="header-anchor" href="#性能分析" aria-hidden="true">#</a> 性能分析</h2><p>在这段代码中，我们使用了两个 while 循环来找到以 nums[k] 为最小值的区间范围 left 和 right。<br> 在最坏情况下，left 和 right 每次都会扩展到数组的两端，因此这两个 while 循环的时间复杂度是 O(n)，其中 n 是数组的长度。<br> 在每次循环中，我们都计算了分数并更新了最大值，这些操作的时间复杂度是 O(1)。<br> 因此，总体上，该算法的时间复杂度是 O(n)。</p><p>空间复杂度，由于没有使用额外的内存，所以空间复杂度为O(1)</p><h2 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h2><p>上面的代码，总是对i进行减一操作，那么就会存在一个问题：当nums[left]和nums[right]都小于i-1时，指针(left,right)是没有被移动的，就造成了有可能存在的至多(n/2 - 1)次的性能浪费；<br> 回过头来，那能不能不进行减一操作？肯定是可以的，我们可以将i直接减至nums[left]与nums[right]两者间的最大值。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">maximumScore</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//结果</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token comment">//定义，避免多次读取，增加性能</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 左边开始，</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">//右边开始</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//无限循环;;，每次循环，nums[k]都会变小以寻找到更小范围的子数组</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//上面分析的，left要触摸到数组的左边界，以及满足小于nums[k]</span>
            <span class="token operator">--</span>left
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//同 right</span>
            <span class="token operator">++</span>right
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token comment">//求取上一个i对应的子数组分数与当前循环子数组的分数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>

        i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>right <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//将i最大限度的减小。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[e];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","2024_03_19.html.vue"]]);export{u as default};
