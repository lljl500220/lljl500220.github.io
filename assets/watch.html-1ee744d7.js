const n=JSON.parse(`{"key":"v-6f988733","path":"/posts/learn/vue/watch.html","title":"watch与watchEffect","lang":"zh-CN","frontmatter":{"title":"watch与watchEffect","icon":"vue","prev":"./computed.md","description":"今天我们一起来看一下watch与watchEffect的源码实现。 watch 用法 const myName = ref('老罗') //1 常用的监听Ref // watch(myName, (newValue, oldValue) =&gt; { // console.log(newValue,oldValue) // }) const myObj = ref({ name: '小罗' }) //这样是监听不到object类型的ref的 watch(myObj, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }) //这样可以监听到整个代理对象 切记不能到基本类型的属性上去，因为属性上是没有effect和代理getter和setter方法的 //我们之前说effect的时候说过，track函数在收集依赖时，到最后剩下的是一个副作用函数。 watch(myObj.value, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }) //可以监听多个 watch([myName, myObj.value], (newValue, oldValue) =&gt; { console.log(newValue, oldValue) //newValue是一个数组，包含了两个值 }) //2.监听reactive const obj = reactive({ name: { names: [] }, }) //监听的是一整个代理对象，就好比ref.value 事实上从代理源代码来看，ref.value本来就是reactive的实现 watch(obj, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }) //这样是不行的，与ref的属性相同，无法对一个基本类型进行监听 watch(obj.name, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }) //针对对象中的属性，vue3提供了函数式写法 这样救能监听属性了 watch(() =&gt; obj.name, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }) //3配置项 watch(myName, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }, { immediate: tru, //立即执行一次 deep: true, //深度监听 flush: 'sync' //同步执行 'post' 在组件更新只后执行 'pre' 在组件更新前执行 })","head":[["meta",{"property":"og:url","content":"https://lljl500220.github.io/posts/learn/vue/watch.html"}],["meta",{"property":"og:site_name","content":"秦篆"}],["meta",{"property":"og:title","content":"watch与watchEffect"}],["meta",{"property":"og:description","content":"今天我们一起来看一下watch与watchEffect的源码实现。 watch 用法 const myName = ref('老罗') //1 常用的监听Ref // watch(myName, (newValue, oldValue) =&gt; { // console.log(newValue,oldValue) // }) const myObj = ref({ name: '小罗' }) //这样是监听不到object类型的ref的 watch(myObj, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }) //这样可以监听到整个代理对象 切记不能到基本类型的属性上去，因为属性上是没有effect和代理getter和setter方法的 //我们之前说effect的时候说过，track函数在收集依赖时，到最后剩下的是一个副作用函数。 watch(myObj.value, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }) //可以监听多个 watch([myName, myObj.value], (newValue, oldValue) =&gt; { console.log(newValue, oldValue) //newValue是一个数组，包含了两个值 }) //2.监听reactive const obj = reactive({ name: { names: [] }, }) //监听的是一整个代理对象，就好比ref.value 事实上从代理源代码来看，ref.value本来就是reactive的实现 watch(obj, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }) //这样是不行的，与ref的属性相同，无法对一个基本类型进行监听 watch(obj.name, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }) //针对对象中的属性，vue3提供了函数式写法 这样救能监听属性了 watch(() =&gt; obj.name, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }) //3配置项 watch(myName, (newValue, oldValue) =&gt; { console.log(newValue, oldValue) }, { immediate: tru, //立即执行一次 deep: true, //深度监听 flush: 'sync' //同步执行 'post' 在组件更新只后执行 'pre' 在组件更新前执行 })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T09:18:30.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-18T09:18:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"watch与watchEffect\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-18T09:18:30.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"watch","slug":"watch","link":"#watch","children":[{"level":3,"title":"用法","slug":"用法","link":"#用法","children":[]},{"level":3,"title":"源码","slug":"源码","link":"#源码","children":[]}]},{"level":2,"title":"watchEffect","slug":"watcheffect","link":"#watcheffect","children":[{"level":3,"title":"用法","slug":"用法-1","link":"#用法-1","children":[]},{"level":3,"title":"源码","slug":"源码-1","link":"#源码-1","children":[]}]}],"git":{"createdTime":1713431910000,"updatedTime":1713431910000,"contributors":[{"name":"luolj","email":"luolj@si-tech.com.cn","commits":1}]},"readingTime":{"minutes":4.82,"words":1446},"filePathRelative":"posts/learn/vue/watch.md","localizedDate":"2024年4月18日","excerpt":"<p>今天我们一起来看一下watch与watchEffect的源码实现。</p>\\n<!--more-->\\n<h2> watch</h2>\\n<h3> 用法</h3>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">const</span> myName <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'老罗'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">//1 常用的监听Ref</span>\\n<span class=\\"token comment\\">// watch(myName, (newValue, oldValue) =&gt; {</span>\\n<span class=\\"token comment\\">//   console.log(newValue,oldValue)</span>\\n<span class=\\"token comment\\">// })</span>\\n<span class=\\"token keyword\\">const</span> myObj <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n    name<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'小罗'</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">//这样是监听不到object类型的ref的</span>\\n<span class=\\"token function\\">watch</span><span class=\\"token punctuation\\">(</span>myObj<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">//这样可以监听到整个代理对象 切记不能到基本类型的属性上去，因为属性上是没有effect和代理getter和setter方法的</span>\\n<span class=\\"token comment\\">//我们之前说effect的时候说过，track函数在收集依赖时，到最后剩下的是一个副作用函数。</span>\\n<span class=\\"token function\\">watch</span><span class=\\"token punctuation\\">(</span>myObj<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">//可以监听多个</span>\\n<span class=\\"token function\\">watch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>myName<span class=\\"token punctuation\\">,</span> myObj<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//newValue是一个数组，包含了两个值</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">//2.监听reactive</span>\\n<span class=\\"token keyword\\">const</span> obj <span class=\\"token operator\\">=</span> <span class=\\"token function\\">reactive</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n    name<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        names<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">//监听的是一整个代理对象，就好比ref.value 事实上从代理源代码来看，ref.value本来就是reactive的实现</span>\\n<span class=\\"token function\\">watch</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">//这样是不行的，与ref的属性相同，无法对一个基本类型进行监听</span>\\n<span class=\\"token function\\">watch</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">//针对对象中的属性，vue3提供了函数式写法 这样救能监听属性了</span>\\n<span class=\\"token function\\">watch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> obj<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">//3配置项</span>\\n<span class=\\"token function\\">watch</span><span class=\\"token punctuation\\">(</span>myName<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n    immediate<span class=\\"token operator\\">:</span> tru<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">//立即执行一次</span>\\n    deep<span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">//深度监听</span>\\n    flush<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'sync'</span> <span class=\\"token comment\\">//同步执行 'post' 在组件更新只后执行 'pre' 在组件更新前执行</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
