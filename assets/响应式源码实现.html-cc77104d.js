const e=JSON.parse('{"key":"v-46d5fadc","path":"/posts/learn/vue/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0.html","title":"实现vue3的响应式源码","lang":"zh-CN","frontmatter":{"title":"实现vue3的响应式源码","icon":"vue","category":["vue"],"prev":"./proxy.md","next":"./computed.md","tag":["vue3"],"description":"上一篇我们说了es6中的代理模式proxy，也提到了它在vue3中的应用，这篇呢我们就来实现vue3响应式的源代码，当然是简易版本。 学习就要知其然而知其所以然。这里呢我们将掠过ref、reactive等api的使用，直窥本质。 reactive函数实现 延续之前的项目结构，在packages/reactivity下新建一个reactive.ts文件，我们先来实现一个reactive函数。 export const reactive = &lt;T extends object&gt;(target:T) =&gt; { return new Proxy(target, { get(target, key, receiver) { let res = Reflect.get(target, key, receiver) return res }, set(target: T, p: string | symbol, newValue: any, receiver: any): boolean { let res = Reflect.set(target, p, newValue, receiver) return res } }) }","head":[["meta",{"property":"og:url","content":"https://lljl500220.github.io/posts/learn/vue/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"秦篆"}],["meta",{"property":"og:title","content":"实现vue3的响应式源码"}],["meta",{"property":"og:description","content":"上一篇我们说了es6中的代理模式proxy，也提到了它在vue3中的应用，这篇呢我们就来实现vue3响应式的源代码，当然是简易版本。 学习就要知其然而知其所以然。这里呢我们将掠过ref、reactive等api的使用，直窥本质。 reactive函数实现 延续之前的项目结构，在packages/reactivity下新建一个reactive.ts文件，我们先来实现一个reactive函数。 export const reactive = &lt;T extends object&gt;(target:T) =&gt; { return new Proxy(target, { get(target, key, receiver) { let res = Reflect.get(target, key, receiver) return res }, set(target: T, p: string | symbol, newValue: any, receiver: any): boolean { let res = Reflect.set(target, p, newValue, receiver) return res } }) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-17T05:52:21.000Z"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:modified_time","content":"2024-04-17T05:52:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实现vue3的响应式源码\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-17T05:52:21.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"reactive函数实现","slug":"reactive函数实现","link":"#reactive函数实现","children":[]},{"level":2,"title":"effect、track、trigger","slug":"effect、track、trigger","link":"#effect、track、trigger","children":[{"level":3,"title":"effect","slug":"effect","link":"#effect","children":[]},{"level":3,"title":"track","slug":"track","link":"#track","children":[]},{"level":3,"title":"trigger","slug":"trigger","link":"#trigger","children":[]}]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1713258611000,"updatedTime":1713333141000,"contributors":[{"name":"luolj","email":"luolj@si-tech.com.cn","commits":2}]},"readingTime":{"minutes":6.16,"words":1848},"filePathRelative":"posts/learn/vue/响应式源码实现.md","localizedDate":"2024年4月16日","excerpt":"<p>上一篇我们说了es6中的代理模式proxy，也提到了它在vue3中的应用，这篇呢我们就来实现vue3响应式的源代码，当然是简易版本。<br>\\n学习就要知其然而知其所以然。这里呢我们将掠过ref、reactive等api的使用，直窥本质。</p>\\n<h2> reactive函数实现</h2>\\n<p>延续之前的项目结构，在packages/reactivity下新建一个reactive.ts文件，我们先来实现一个reactive函数。</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">const</span> reactive <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">object</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token operator\\">:</span><span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">let</span> res <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">return</span> res\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">,</span> p<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">|</span> <span class=\\"token builtin\\">symbol</span><span class=\\"token punctuation\\">,</span> newValue<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">,</span> receiver<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">let</span> res <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> p<span class=\\"token punctuation\\">,</span> newValue<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">return</span> res\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
