const n=JSON.parse(`{"key":"v-bd23a694","path":"/posts/learn/simulation/20250224%E6%99%BA%E7%8E%B0%E6%9C%AA%E6%9D%A5.html","title":"智现未来20250224一面","lang":"zh-CN","frontmatter":{"title":"智现未来20250224一面","icon":"edit","isOriginal":true,"category":["面试"],"tag":["vue3"],"description":"算法 其实就是一个二叉树生成,印象中力扣或者牛客做过这道题,太久了还想了一会,一开始都没想起来怎么写,直接尬住 /* 使用 TypeScript 语法将没有层级的扁平数据转换成树形结构的数据 // 扁平数据 [ { name: '文本1', parent: null, id: 1 }, { name: '文本2', parent: 1, id: 2 }, { name: '文本3', parent: 2, id: 3 }, { name: '文本4', parent: null, id: 4 }, { name: '文本5', parent: 4, id: 5 } ] // 树状数据 [ { name: '文本1', id: 1, children: [ { name: '文本2', id: 2, children: [ { name: '文本3', id: 3, children: [], } ] } ] }, { name: \\"文本4\\", id: 4, children: [ { name: '文本5', id: 5, children: [], } ] } ] */ // 反正力扣或者牛客上都有 interface TreeNode { name: string, parent?: number | null, id: number, } function convert2Tree(arr: TreeNode[]) { const map: Map&lt;number, TreeNode&gt; = new Map() const rootNode: TreeNode[] = []; // 遍历 arr.forEach(item =&gt; { const node = { name: item.name, id: item.id, children: [] } map.set(item.id, node) if (item.parent === null) { rootNode.push(node) } else { const parent = map.get(item.parent) if (parent) { parent.children.push(node) } } }) return rootNode }","head":[["meta",{"property":"og:url","content":"https://lljl500220.github.io/posts/learn/simulation/20250224%E6%99%BA%E7%8E%B0%E6%9C%AA%E6%9D%A5.html"}],["meta",{"property":"og:site_name","content":"秦篆"}],["meta",{"property":"og:title","content":"智现未来20250224一面"}],["meta",{"property":"og:description","content":"算法 其实就是一个二叉树生成,印象中力扣或者牛客做过这道题,太久了还想了一会,一开始都没想起来怎么写,直接尬住 /* 使用 TypeScript 语法将没有层级的扁平数据转换成树形结构的数据 // 扁平数据 [ { name: '文本1', parent: null, id: 1 }, { name: '文本2', parent: 1, id: 2 }, { name: '文本3', parent: 2, id: 3 }, { name: '文本4', parent: null, id: 4 }, { name: '文本5', parent: 4, id: 5 } ] // 树状数据 [ { name: '文本1', id: 1, children: [ { name: '文本2', id: 2, children: [ { name: '文本3', id: 3, children: [], } ] } ] }, { name: \\"文本4\\", id: 4, children: [ { name: '文本5', id: 5, children: [], } ] } ] */ // 反正力扣或者牛客上都有 interface TreeNode { name: string, parent?: number | null, id: number, } function convert2Tree(arr: TreeNode[]) { const map: Map&lt;number, TreeNode&gt; = new Map() const rootNode: TreeNode[] = []; // 遍历 arr.forEach(item =&gt; { const node = { name: item.name, id: item.id, children: [] } map.set(item.id, node) if (item.parent === null) { rootNode.push(node) } else { const parent = map.get(item.parent) if (parent) { parent.children.push(node) } } }) return rootNode }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T11:18:36.000Z"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:modified_time","content":"2025-02-24T11:18:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"智现未来20250224一面\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T11:18:36.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1740395916000,"updatedTime":1740395916000,"contributors":[{"name":"lljl500220","email":"1723377108@qq.com","commits":1}]},"readingTime":{"minutes":2.32,"words":695},"filePathRelative":"posts/learn/simulation/20250224智现未来.md","localizedDate":"2025年2月24日","excerpt":"<!--more-->\\n<ol>\\n<li>算法\\n其实就是一个二叉树生成,印象中力扣或者牛客做过这道题,太久了还想了一会,一开始都没想起来怎么写,直接尬住</li>\\n</ol>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">/*\\n使用 TypeScript 语法将没有层级的扁平数据转换成树形结构的数据\\n// 扁平数据 \\n[\\n    {   name: '文本1',   parent: null,   id: 1 }, \\n    {   name: '文本2',   parent: 1,      id: 2 }, \\n    {   name: '文本3',   parent: 2,      id: 3 },\\n    {   name: '文本4',   parent: null,   id: 4 },\\n    {   name: '文本5',   parent: 4,      id: 5 }\\n] \\n// 树状数据 \\n[\\n    {   \\n        name: '文本1',   \\n        id: 1,   \\n        children: [\\n            {     \\n                name: '文本2',     \\n                id: 2,     \\n                children: [\\n                    {       \\n                        name: '文本3',       \\n                        id: 3,\\n                        children: [],   \\n                    }\\n                ]   \\n            }\\n        ] \\n    }, {\\n        name: \\"文本4\\",\\n        id: 4,\\n        children: [\\n            {\\n                name: '文本5',\\n                id: 5,\\n                children: [],\\n            }\\n        ]\\n    }\\n] \\n*/</span>\\n\\n<span class=\\"token comment\\">// 反正力扣或者牛客上都有</span>\\n\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">TreeNode</span> <span class=\\"token punctuation\\">{</span>\\n    name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span>\\n    parent<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span> <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span>\\n    id<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">convert2Tree</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token operator\\">:</span> TreeNode<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> map<span class=\\"token operator\\">:</span> Map<span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">,</span> TreeNode<span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">const</span> rootNode<span class=\\"token operator\\">:</span> TreeNode<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 遍历</span>\\n    arr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span>item <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">const</span> node <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n            name<span class=\\"token operator\\">:</span> item<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">,</span>\\n            id<span class=\\"token operator\\">:</span> item<span class=\\"token punctuation\\">.</span>id<span class=\\"token punctuation\\">,</span>\\n            children<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">.</span>id<span class=\\"token punctuation\\">,</span> node<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">.</span>parent <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            rootNode<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">const</span> parent <span class=\\"token operator\\">=</span> map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">.</span>parent<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>parent<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                parent<span class=\\"token punctuation\\">.</span>children<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> rootNode\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
