import{_ as p,V as e,W as o,X as c,Y as n,Z as s,a0 as i,a2 as a,F as l}from"./framework-82b537ca.js";const u={},r=n("h2",{id:"build-js",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#build-js","aria-hidden":"true"},"#"),s(" build.js")],-1),k=n("p",null,"在packages文件夹同级新建一个scripts文件夹，添加一个build.js文件。我们将通过这个文件来读取模块文件，并构建输出。",-1),d=a(`<h3 id="文件读取" tabindex="-1"><a class="header-anchor" href="#文件读取" aria-hidden="true">#</a> 文件读取</h3><p>由于vue3的核心代码使用分包的形式，分别写在packages/reactivity、packages/runtime-core、packages/shared等文件夹下，我们需要将这些文件读取出来，然后合并到一个文件中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;node:fs/promises&#39;</span><span class="token punctuation">;</span> <span class="token comment">//fs模块用于操作文件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>existsSync<span class="token punctuation">,</span>readfileSync<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span> <span class="token comment">//判断文件是否存在，读取文件</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;node:path&#39;</span><span class="token punctuation">;</span> <span class="token comment">//path模块用于操作文件路径</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>cpus<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:os&#39;</span><span class="token punctuation">;</span> <span class="token comment">//获取cpu核心数</span>

<span class="token comment">//1. 读取文件夹</span>
<span class="token keyword">const</span> dirs <span class="token operator">=</span> <span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;../packages&#39;</span><span class="token punctuation">)</span> <span class="token comment">//[&#39;reactivity&#39;,&#39;runtime-core&#39;,&#39;shared&#39;...]</span>

<span class="token comment">//判断读取到的内容是否是packages下的文件夹</span>
<span class="token keyword">const</span> dirs <span class="token operator">=</span> <span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;../packages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">target</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">statSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//2. 并行打包</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">buildAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">runParallel</span><span class="token punctuation">(</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> targets<span class="token punctuation">,</span> build<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),m={class:"hint-container info"},v=n("p",{class:"hint-container-title"},"node小知识",-1),b={href:"https://nodejs.org/dist/latest-v16.x/docs/api/fs.html",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>上方的代码，处理了文件读取和并行打包的逻辑，接下来我们来实现runParallel函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 并行打包
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">&lt;</span>string<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> <span class="token parameter">targets</span> - 需要打包的一个数组
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> - 一个promise对象 代表打包过程
 */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">runParallel</span><span class="token punctuation">(</span><span class="token parameter">maxConcurrency<span class="token punctuation">,</span> source<span class="token punctuation">,</span> iteratorFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**<span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> */</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 返回的promise数组 是用来描述所有任务的</span>
    <span class="token doc-comment comment">/**<span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> */</span>
    <span class="token keyword">const</span> executing <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 正在执行的任务</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 调用iteratorFn函数 为什么要用Promise.resolve().then()包裹一层？ 因为iteratorFn函数可能是异步的，这样可以保证每个任务都是异步的</span>
        ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxConcurrency <span class="token operator">&lt;=</span> source<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果并发数小于任务数 则需要控制并发数</span>
            <span class="token keyword">const</span> e <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                executing<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>executing<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 任务完成后，从执行列表中移除</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            executing<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment">// 保存当前任务</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>executing<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> maxConcurrency<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果当前执行的任务数大于等于最大并发数，则等待最快的任务完成</span>
                <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>executing<span class="token punctuation">)</span> <span class="token comment">// 等待最快的任务完成，然后继续执行</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token comment">// 返回所有任务的promise数组</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法主要是为了控制并发数与cpu核心数的关系，如果并发数大于cpu核心数，那么就需要控制并发数，这样可以避免cpu过载。</p><div class="hint-container info"><p class="hint-container-title">node小知识</p><p>这里使用了Promise.race方法，此方法返回一个 Promise，一旦迭代器中的某个 promise 解决或拒绝， 返回的 promise 就会解决或拒绝。以下我给出几个例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&#39;one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;two&quot;</span>
    <span class="token comment">// 都会完成，但是promise2会先完成 同理的 reject也是一样，会先出发catch或者error</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>接下来实现build函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 打包
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">target</span> - 需要打包的文件夹
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> - 一个promise对象 代表打包过程
 */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取到目标的绝对路径</span>
    <span class="token keyword">const</span> pkgDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token comment">//获取到目标的package.json</span>
    <span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pkgDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/package.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

    <span class="token comment">//按照官方的逻辑，如果是发布版本或者没有指定目标，则忽略私有包 此处我们不再关心这个问题</span>
    <span class="token comment">// if ((isRelease || !targets.length) &amp;&amp; pkg.private) {</span>
    <span class="token comment">//      return</span>
    <span class="token comment">// }</span>

    <span class="token comment">//删除dist目录</span>
    <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pkgDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/dist</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">//按照官方的逻辑，如果是特定格式的构建，则不要删除dist 此处我们不再关心这个问题</span>
    <span class="token comment">// if (!formats &amp;&amp; existsSync(\`\${pkgDir}/dist\`)) {</span>
    <span class="token comment">//     await fs.rm(\`\${pkgDir}/dist\`, { recursive: true })</span>
    <span class="token comment">// }</span>

    <span class="token comment">//执行打包</span>

    <span class="token comment">//获取环境变量 由于我们是学习目的，此处也不再考虑环境变量的问题，全部构建为生产环境</span>
    <span class="token comment">// const env = (pkg.buildOptions &amp;&amp; pkg.buildOptions.env) || (devOnly ? &#39;development&#39; : &#39;production&#39;)</span>

    <span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token string">&#39;production&#39;</span>
    
    <span class="token keyword">await</span> <span class="token function">execa</span><span class="token punctuation">(</span>
        <span class="token string">&#39;rollup&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            <span class="token string">&#39;-c&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;--environment&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span>
                <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">NODE_ENV:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>env<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
                <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">TARGET:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
            <span class="token punctuation">]</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">&#39;inherit&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 将子进程的输出打印到父进程</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">node小知识</p><p>Execa 是一个 Node.js 库，可以替代 Node.js 的原生 child_process 模块， 用于执行外部命令。Execa拥有更好的性能、可靠性和易用性，支持流式传输、输出控制、交互式 shell 等功能， 并跨平台兼容 Windows、macOS 和 Linux 等操作系统。同时，Execa 还支持 Promise API，提供更好的异步控制和异常处理机制。 使用 Execa 可以简化发现和解决常见的子进程处理问题，是 Node.js 开发中非常有用的工具之一。</p></div><h2 id="rollup-config-js" tabindex="-1"><a class="header-anchor" href="#rollup-config-js" aria-hidden="true">#</a> rollup.config.js</h2><p>在根目录下新建一个rollup.config.js文件，用于配置rollup的打包规则。</p><h3 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h3><p>首先还是导入rollup需要的一些依赖</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>fileURLToPath<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:url&#39;</span> <span class="token comment">//用于处理文件路径</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>createRequire<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:module&#39;</span> <span class="token comment">//用于创建require函数</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;node:path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> json <span class="token keyword">from</span> <span class="token string">&quot;@rollup/plugin-json&quot;</span><span class="token punctuation">;</span> <span class="token comment">//用于处理文件路径</span>
<span class="token keyword">import</span> esbuild <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-esbuild&#39;</span> <span class="token comment">//用于处理文件路径</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入上诉后的内容后，开始编写内容</p><h3 id="处理常量" tabindex="-1"><a class="header-anchor" href="#处理常量" aria-hidden="true">#</a> 处理常量</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如果命令行参数中没有指定目标，则抛出错误</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TARGET</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;必须选择一个目标&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> require <span class="token operator">=</span> <span class="token function">createRequire</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token comment">//创建require函数</span>
<span class="token keyword">const</span> __dirname <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//获取当前文件所在目录的绝对路径</span>

<span class="token keyword">const</span> masterVersion <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version <span class="token comment">//获取主版本号</span>

<span class="token keyword">const</span> packagesDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;packages&#39;</span><span class="token punctuation">)</span> <span class="token comment">//获取packages目录的绝对路径</span>
<span class="token keyword">const</span> packageDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>packagesDir<span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TARGET</span><span class="token punctuation">)</span> <span class="token comment">//获取目标包的绝对路径</span>

<span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> */</span> p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>packageDir<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token comment">//获取目标包内的文件的绝对路径</span>
<span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>packageDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/package.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">//获取目标包的package.json</span>
<span class="token keyword">const</span> packageOptions <span class="token operator">=</span> pkg<span class="token punctuation">.</span>buildOptions <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//获取目标包的构建选项</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> packageOptions<span class="token punctuation">.</span>filename <span class="token operator">||</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>packageDir<span class="token punctuation">)</span> <span class="token comment">//获取目标包的名称</span>

<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Record<span class="token punctuation">&lt;</span>PackageFormat<span class="token punctuation">,</span> OutputOptions<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> */</span>
<span class="token keyword">const</span> outputConfigs <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;esm-bundler&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.esm-bundler.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//esm-bundler适用于 bundlers（例如 webpack、Rollup）的 ES module 包</span>
        <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;es&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;cjs&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.cjs.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// commonjs格式</span>
        <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上面的这些内容都指定后，就可以着手编写rollup的配置了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>ReadonlyArray<span class="token punctuation">&lt;</span>PackageFormat<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> */</span>
<span class="token keyword">const</span> defaultFormats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;esm-bundler&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cjs&#39;</span><span class="token punctuation">]</span> <span class="token comment">//默认的打包格式，包含commonjs以及esm</span>

<span class="token comment">//此处按照最新的vue打包配置来看，理应先判断是否有inlineFormats，如果有则使用inlineFormats，否则使用defaultFormats</span>
<span class="token comment">//打包格式</span>
<span class="token comment">//我们只关注生产模式，相当于只打生产包</span>
<span class="token keyword">const</span> packageConfigs <span class="token operator">=</span> defaultFormats<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">format</span> <span class="token operator">=&gt;</span> <span class="token function">createConfig</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> outputConfigs<span class="token punctuation">[</span>format<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">export</span> <span class="token keyword">default</span> packageConfigs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于rollup一般是导出一个配置出去，所以上面的createConfig方法就是用来创建这个文件的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createConfig</span><span class="token punctuation">(</span><span class="token parameter">format<span class="token punctuation">,</span> output<span class="token punctuation">,</span> plugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//返回一个rollup配置对象</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/index.ts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//入口文件 我们简易实现，仅保留&#39;src/index.ts&#39;这种情况，事实上还有运行时等其他情况</span>
        <span class="token literal-property property">output</span><span class="token operator">:</span> output<span class="token punctuation">,</span> <span class="token comment">//输出配置 其实就是outputConfigs[format] vue本身实现了相当多中格式输出，但是我们只保留了两种</span>
        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">namedExports</span><span class="token operator">:</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">esbuild</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">//处理ts文件</span>
                <span class="token literal-property property">tsconfig</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;tsconfig.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> output<span class="token punctuation">.</span>sourcemap<span class="token punctuation">,</span>
                <span class="token literal-property property">minify</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;es2015&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">define</span><span class="token operator">:</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>masterVersion<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token operator">...</span>plugins <span class="token comment">//其它有可能存在的插件</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一个简易的rollup配置文件就完成了，接下来我们就可以通过node执行build.js文件，来进行打包了。其实原代码也没有特别复杂，只是在基础打包上面区分了各种环境，处理了一些特殊的情况，这样就可以更好的适应vue3的打包需求了。</p><h2 id="执行打包" tabindex="-1"><a class="header-anchor" href="#执行打包" aria-hidden="true">#</a> 执行打包</h2><p>在package.json中添加一个脚本</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node scripts/build.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就可以进行打包了。现在将会在每个模块的dist文件夹下生成对应的打包文件。比如shared模块下的dist文件夹下就会生成shared.esm-bundler.js和shared.cjs.js两个文件。</p><p>如果需要将各种模块都集合为一个vue模块，则需要额外实现一个以vue为入口的打包文件，这个文件会引入各个模块，然后再进行打包。这个文件的实现和上面的文件类似，只是需要引入各个模块，然后再进行打包。</p>`,27);function y(f,h){const t=l("ExternalLinkIcon");return e(),o("div",null,[r,k,c(" more "),d,n("div",m,[v,n("p",null,[s("这里使用了statSync方法来判断是否是文件夹，使用readdirSync方法来读取文件夹下的文件。都是常用的node.js文件操作方法，如果不熟悉可以查看"),n("a",b,[s("node.js文档"),i(t)]),s("。")])]),g])}const j=p(u,[["render",y],["__file","build.html.vue"]]);export{j as default};
